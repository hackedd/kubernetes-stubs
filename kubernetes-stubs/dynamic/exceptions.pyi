from typing import Optional

from kubernetes.client.rest import ApiException as ApiException

def api_exception(e: ApiException):
    DynamicApiError

class DynamicApiError(ApiException):
    status: Optional[int]
    reason: Optional[str]
    body: Optional[str]
    headers: dict[str, str]
    original_traceback: Optional[str]
    def __init__(self, e: ApiException, tb: Optional[str] = None) -> None: ...
    def summary(self) -> str: ...

class ResourceNotFoundError(Exception): ...
class ResourceNotUniqueError(Exception): ...
class KubernetesValidateMissing(Exception): ...
class BadRequestError(DynamicApiError): ...
class UnauthorizedError(DynamicApiError): ...
class ForbiddenError(DynamicApiError): ...
class NotFoundError(DynamicApiError): ...
class MethodNotAllowedError(DynamicApiError): ...
class ConflictError(DynamicApiError): ...
class GoneError(DynamicApiError): ...
class UnprocessibleEntityError(DynamicApiError): ...
class TooManyRequestsError(DynamicApiError): ...
class InternalServerError(DynamicApiError): ...
class ServiceUnavailableError(DynamicApiError): ...
class ServerTimeoutError(DynamicApiError): ...
